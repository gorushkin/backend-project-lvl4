- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const isItemSelected = (id, ids) => id === ids || _.find(ids, { id })

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (!propertyErrors ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - name = getInputName(propertyName)
  .form-group(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`form.${propertyName}`)
    input(
      id= inputId
      name= name
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  .form-group
    input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin select(task, propertyName, errors = {}, items, multiple = false)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (!propertyErrors ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - name = getInputName(propertyName)
  .form-group
    label(for=inputId)= t(`views.tasks.${propertyName}`)
    select.form-control(
        id= inputId,
        name=name,
        multiple=multiple
        class=classLine
      )
      if !multiple
        option
      each item in items
        option(value=item.id, selected= isItemSelected(item.id, task[propertyName]))= item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin selectMultiple(task, propertyName, errors = {}, items)
  +select(task, propertyName, errors, items, true)

mixin filterSelect(propertyName, items)
  - inputId = getInputId(propertyName)
  .form-group
    label(for=inputId)= t(`views.tasks.${propertyName}`)
    select.form-control.ml-2.mr-3(id= inputId, name=propertyName)
      option
      each item in items
        option(value=item.id, selected= item.id == query[propertyName])= item.name


mixin checkbox(propertyName)
  - inputId = getInputId(propertyName)
  - name = getInputName(propertyName)
  .form-group.form-check
    input.form-check-input(id= inputId type='checkbox', name=propertyName, checked=(!!query[propertyName]))
    label.form-check-label(for=inputId)= t(`views.tasks.${propertyName}`)